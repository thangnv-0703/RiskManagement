import { convertAssetType } from '@/shared/common';
import { MAX_INT } from '@/shared/constant';
import { Table } from 'antd';
import React, { useEffect, useState } from 'react';
import { getAssetsInDeploymentScenario } from '../service';
import VulnerabiliesSettingPerAsset from './components/VulnerabiliesSettingPerAsset';

const VulnerabilySettingMonitoring = ({ deployment_scenario_id, sync, setSync }) => {
  const [activeCVEs, setActiveCVEs] = useState({});
  const [expandedRowKeys, setExpandedRowKeys] = useState([]);
  const [assets, setAssets] = useState([]);

  const columns = [
    {
      title: 'Asset name',
      width: '40%',
      dataIndex: 'name',
    },
    {
      title: 'Type',
      width: '15%',
      dataIndex: 'part',
      render: (_) => convertAssetType(_),
    },
    {
      title: 'Vendor',
      width: '10%',
      dataIndex: 'vendor',
    },
    {
      title: 'Product',
      width: '10%',
      dataIndex: 'product',
    },
    {
      title: 'Version',
      width: '10%',
      dataIndex: 'version',
    },
    {
      title: 'Number CVEs',
      width: '15%',
      dataIndex: 'number_cves',
      render: (_, record) => activeCVEs[record.id]?.length,
    },
  ];

  useEffect(() => {
    const fetchData = async () => {
      const resData = await getAssetsInDeploymentScenario(deployment_scenario_id, {
        pageSize: MAX_INT,
      });
      setAssets(resData.data.assets);
      setActiveCVEs(resData.data.active);
    };

    fetchData();
  }, []);

  return (
    <>
      <Table
        columns={columns}
        dataSource={assets}
        rowKey="id"
        pagination={{ hideOnSinglePage: true }}
        expandable={{
          expandedRowRender: (record) => (
            <VulnerabiliesSettingPerAsset
              asset_id={record.id}
              deployment_scenario_id={deployment_scenario_id}
              activeCVEs={activeCVEs}
              setActiveCVEs={setActiveCVEs}
              sync={sync}
              setSync={setSync}
            />
          ),
          expandedRowKeys: expandedRowKeys,
          onExpand: (expaned, record) => {
            if (expaned) {
              setExpandedRowKeys([record.id]);
            } else {
              setExpandedRowKeys([]);
            }
          },
        }}
        dateFormatter="string"
        options={false}
      />
    </>
  );
};
export default VulnerabilySettingMonitoring;
