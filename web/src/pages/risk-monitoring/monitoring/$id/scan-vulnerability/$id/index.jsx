import { LoadingOutlined, SyncOutlined } from "@ant-design/icons"
import { PageContainer } from "@ant-design/pro-layout"
import ProTable from "@ant-design/pro-table"
import { Button, Card, Col, Divider, Row, Space, Spin } from "antd"
import { useState } from "react"
import { useEffect } from "react"
import { postScanVulnerability } from "../../../../service"

import { history } from "umi"

const ScanVulnerability = ({ deployment_scenario_id }) => {
    const [loading, setLoading] = useState(false)
    const [newCVE, setNewCVE] = useState([])
    const [removeCVE, setRemoveCVE] = useState([])
    const [assets, setAssets] = useState([])

    const fetchData = async () => {
        setLoading(true)
        const res = await postScanVulnerability(deployment_scenario_id)
        if (res) {
            setNewCVE(res.new_cves)
            setRemoveCVE(res.remove_cves)
            setAssets(res.assets)
        }
        setLoading(false)
    }

    const newCVEColumns = [
        {
            title: 'Asset name',
            dataIndex: 'asset_id',
            key: 'asset_id',
            width: '40%',
            render: (asset_id) => assets.find(as => as.id === asset_id)?.name,
        },
        {
            title: 'CVE',
            dataIndex: 'cves',
            key: 'cves',
            render: (cves) => (
                <Space>
                    {
                        cves.map(cve => (
                            <a
                                onClick={() => {
                                    window.open(`/data/cve/${cve}`, "_blank");
                                }}
                                key={cve}
                            >
                                {cve}
                            </a>
                        ))
                    }
                </Space>
            ),
        },
    ]

    const removeCVEColumns = [
        {
            title: 'Asset name',
            dataIndex: 'asset_id',
            key: 'asset_id',
            width: '40%',
            render: (asset_id) => assets.find(as => as.id === asset_id)?.name,
        },
        {
            title: 'CVE',
            dataIndex: 'cves',
            key: 'cves',
            render: (cves) => cves.join(','),
        },
    ]

    return (
        <>
            <Row style={{marginBottom: 20}}>
                <Col span={24}>
                    <Button
                        type="primary"
                        onClick={async () => {
                            await fetchData()
                        }}
                        loading={loading}
                    >
                        Scan
                    </Button>
                </Col>
            </Row>
            <Row>
                <Col span={24}>
                    <h3>New CVE detect</h3>
                    <ProTable
                        dataSource={newCVE}
                        columns={newCVEColumns}
                        toolBarRender={false}
                        loading={loading}
                        bordered
                        search={false}
                    />
                    {/* <Divider />
                    <h3>Remove CVE detect</h3>
                    <ProTable
                        dataSource={removeCVE}
                        columns={removeCVEColumns}
                        toolBarRender={false}
                        loading={loading}
                        bordered
                        search={false}
                    /> */}
                </Col>
            </Row>
        </>
    )
}
export default ScanVulnerability
