import { convertAssetType } from '@/shared/common';
import { MAX_INT } from '@/shared/constant';
import { DownOutlined, EllipsisOutlined, QuestionCircleOutlined } from '@ant-design/icons';
import { PageContainer } from '@ant-design/pro-layout';
import ProTable from '@ant-design/pro-table';
import { Button, Tag, Tooltip } from 'antd';
import React, { useEffect, useState } from 'react';
import { getAssetsInDeploymentScenario } from '../service';
import VulnerabiliesAnalysisPerAsset from './components/VulnerabiliesAnalysisPerAsset';

const VulnerabiliesAnalysis = ({ deployment_scenario_id, assets, setAssets, cwes }) => {
  const [activeCVEs, setActiveCVEs] = useState({});
  const [expandedRowKeys, setExpandedRowKeys] = useState([]);

  const columns = [
    {
      title: 'Asset name',
      width: '45%',
      dataIndex: 'name',
    },
    {
      title: 'Type',
      width: '15%',
      dataIndex: 'part',
      render: (_) => convertAssetType(_),
    },
    {
      title: 'Vendor',
      width: '10%',
      dataIndex: 'vendor',
    },
    {
      title: 'Product',
      width: '10%',
      dataIndex: 'product',
    },
    {
      title: 'Version',
      width: '10%',
      dataIndex: 'version',
    },
    {
      title: 'Selected CVEs',
      width: '10%',
      dataIndex: 'number_cves',
      render: (_, record) => activeCVEs[record.id]?.length,
    },
  ];

  useEffect(() => {
    const fetchData = async () => {
      const resData = await getAssetsInDeploymentScenario(deployment_scenario_id, {
        pageSize: MAX_INT,
      });
      setAssets(resData.data.assets);
      setActiveCVEs(resData.data.active);
    };

    fetchData();
  }, []);

  return (
    <ProTable
      style={{ overflow: 'auto', maxHeight: 'calc(100vh - 384px)' }}
      columns={columns}
      dataSource={assets}
      rowKey="id"
      pagination={{
        showQuickJumper: true,
        hideOnSinglePage: true,
      }}
      expandable={{
        expandedRowRender: (record) => (
          <VulnerabiliesAnalysisPerAsset
            asset_id={record.id}
            deployment_scenario_id={deployment_scenario_id}
            activeCVEs={activeCVEs}
            setActiveCVEs={setActiveCVEs}
            cwes={cwes}
          />
        ),
        expandedRowKeys: expandedRowKeys,
        onExpand: (expaned, record) => {
          if (expaned) {
            setExpandedRowKeys([record.id]);
          } else {
            setExpandedRowKeys([]);
          }
        },
      }}
      search={false}
      dateFormatter="string"
      options={false}
      bordered
    />
  );
};
export default VulnerabiliesAnalysis;
