import {
  AV_ADJACENT_NETWORK,
  AV_ALL,
  AV_LOCAL,
  AV_NETWORK,
  AV_PHYSICAL,
  MAX_INT,
  PR_ALL,
} from '@/shared/constant';
import { Affix, Button, Form, Input, message, Select, Table, Typography } from 'antd';
import React, { useContext, useEffect, useRef, useState } from 'react';
import { getVulsInAssetOnAttackGraph, updateVulInAssetOnAttackGraph } from '../../service';
const { Paragraph } = Typography;

import './index.css';

const EditableContext = React.createContext(null);

const EditableRow = ({ index, ...props }) => {
  const [form] = Form.useForm();
  return (
    <Form form={form} component={false}>
      <EditableContext.Provider value={form}>
        <tr {...props} />
      </EditableContext.Provider>
    </Form>
  );
};

const EditableCell = ({
  title,
  editable,
  children,
  dataIndex,
  record,
  handleSave,
  ...restProps
}) => {
  const [editing, setEditing] = useState(false);
  const inputRef = useRef(null);
  const form = useContext(EditableContext);
  useEffect(() => {
    if (editing) {
      inputRef.current.focus();
    }
  }, [editing]);

  const toggleEdit = () => {
    setEditing(!editing);
    form.setFieldsValue({
      [dataIndex]: record[dataIndex],
    });
  };

  const save = async () => {
    try {
      const values = await form.validateFields();
      toggleEdit();
      handleSave({ ...record, ...values });
    } catch (errInfo) {
      console.log('Save failed:', errInfo);
    }
  };

  let childNode = children;

  if (editable) {
    childNode = editing ? (
      <Form.Item
        style={{
          margin: 0,
        }}
        name={dataIndex}
        rules={[
          {
            required: true,
            message: `${title} is required.`,
          },
          {
            validator: (_, value) => {
              if (dataIndex == 'exploitabilityScore') {
                if (!value) {
                  return Promise.reject();
                }
                if (isNaN(value)) {
                  return Promise.reject(`${title} has to be a number.`);
                }
                const num = parseFloat(value);
                if (num > 10 || num < 0) {
                  return Promise.reject(`${title} between 0 and 10.`);
                }
              }
              return Promise.resolve();
            },
          },
        ]}
      >
        {dataIndex === 'exploitabilityScore' ? (
          <Input ref={inputRef} onBlur={save} />
        ) : dataIndex === 'attack_vector' ? (
          <Select ref={inputRef} onBlur={save}>
            {AV_ALL.map((av) => (
              <Select.Option key={av} value={av}>
                {av}
              </Select.Option>
            ))}
          </Select>
        ) : (
          <Select ref={inputRef} onBlur={save}>
            {PR_ALL.map((av) => (
              <Select.Option key={av} value={av}>
                {av}
              </Select.Option>
            ))}
          </Select>
        )}
      </Form.Item>
    ) : (
      <div
        className="editable-cell-value-wrap"
        style={{
          paddingRight: 24,
        }}
        onClick={toggleEdit}
      >
        {children}
      </div>
    );
  }

  return <td {...restProps}>{childNode}</td>;
};

const VulnerabiliesSettingPerAsset = ({ asset_id, deployment_scenario_id }) => {
  const [dataSource, setDataSource] = useState([]);

  const columns = [
    {
      title: 'CVE ID',
      dataIndex: 'cve_id',
      width: '20%',
    },
    {
      title: 'Description',
      dataIndex: 'description',
      width: '40%',
      hideInForm: true,
      hideInSearch: true,
      render: (val) => <Paragraph ellipsis={{ tooltip: val, rows: 3 }}>{val}</Paragraph>,
    },
    {
      title: 'Exploitability',
      dataIndex: 'exploitabilityScore',
      width: '10%',
      editable: true,
    },
    {
      title: 'Attack vector',
      dataIndex: 'attack_vector',
      width: '10%',
      editable: true,
    },
    {
      title: 'Prerequisite',
      dataIndex: 'preCondition',
      width: '10%',
      editable: true,
    },
    {
      title: 'Postcondition',
      dataIndex: 'postCondition',
      width: '10%',
      editable: true,
    },
  ];

  const handleClickSave = async () => {
    let error_cves = [];
    dataSource.forEach((data) => {
      if (
        !data.attack_vector?.length ||
        !data.preCondition?.length ||
        !data.postCondition?.length
      ) {
        error_cves.push(data.cve_id);
      }
    });
    if (error_cves.length !== 0) {
      message.error(
        `Please enter all Attack vector, Precondition, Prerequisite of [${error_cves.join(',')}]`,
      );
    } else {
      const res = await updateVulInAssetOnAttackGraph(deployment_scenario_id, asset_id, {
        cves: dataSource.map((data) => ({
          ...data,
          impact: {
            ...data.impact,
            baseMetricV2: {
              ...data.impact.baseMetricV2,
              exploitabilityScore: data.exploitabilityScore,
            },
          },
          attack_vector: data.attack_vector,
          condition: {
            preCondition: data.preCondition,
            postCondition: data.postCondition,
          },
        })),
      });
      if (res) {
        message.success('Save done!');
      }
    }
  };

  useEffect(() => {
    const fetchData = async () => {
      const res = await getVulsInAssetOnAttackGraph(deployment_scenario_id, asset_id, {
        pageSize: MAX_INT,
      });
      const v = res?.data?.map((item) => {
        return {
          key: item.id,
          ...item,
          exploitabilityScore: item?.impact?.baseMetricV2?.exploitabilityScore,
          preCondition: item?.condition?.preCondition,
          postCondition: item?.condition?.postCondition,
        };
      });
      setDataSource(v);
    };
    fetchData();
  }, []);

  const handleSave = (row) => {
    const newData = [...dataSource];
    const index = newData.findIndex((item) => row.cve_id === item.cve_id);
    let item = newData[index];
    newData.splice(index, 1, {
      ...item,
      ...{ ...row, exploitabilityScore: parseFloat(row.exploitabilityScore) },
    });
    setDataSource(newData);
  };

  return (
    <div>
      <Table
        rowKey="cve_id"
        toolBarRender={false}
        components={{
          body: {
            row: EditableRow,
            cell: EditableCell,
          },
        }}
        pagination={{ hideOnSinglePage: true }}
        rowClassName={() => 'editable-row'}
        bordered
        dataSource={dataSource}
        columns={columns.map((col) => {
          if (!col.editable) {
            return col;
          }

          return {
            ...col,
            onCell: (record) => ({
              record,
              editable: col.editable,
              dataIndex: col.dataIndex,
              title: col.title,
              handleSave: handleSave,
            }),
          };
        })}
      />

      <Affix style={{ position: 'fixed', right: 50, bottom: 50, zIndex: 1000 }}>
        <Button type="primary" onClick={handleClickSave}>
          Save
        </Button>
      </Affix>
    </div>
  );
};
export default VulnerabiliesSettingPerAsset;
